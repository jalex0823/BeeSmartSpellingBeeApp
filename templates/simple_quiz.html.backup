{% extends "base.html" %}

{% block title %}BeeSmart Spelling Quiz{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/BeeSmart.css') }}">
<style>
    .quiz-container {
        max-width: 960px;
        margin: 0 auto;
        text-align: center;
        padding: 2.5rem 1.5rem 4.5rem;
        position: relative;
    }

    .quiz-header {
        display: flex;
        flex-direction: column;
        gap: 1.25rem;
        background: rgba(255, 255, 255, 0.82);
        border-radius: 24px;
        padding: 1.75rem;
        box-shadow: 0 18px 32px rgba(255, 193, 7, 0.22);
        border: 2px solid rgba(255, 193, 7, 0.35);
        margin-bottom: 2rem;
    }

    .quiz-header::after {
        display: none;
    }

    .progress-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        color: #5d4100;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .score-display {
        display: flex;
        justify-content: center;
        gap: clamp(1rem, 5vw, 3rem);
        flex-wrap: wrap;
    }

    .score-item {
        min-width: 120px;
        background: rgba(255, 255, 255, 0.88);
        border-radius: 18px;
        padding: 0.9rem 1.25rem;
        border: 1px solid rgba(255, 213, 79, 0.6);
        box-shadow: 0 12px 20px rgba(255, 193, 7, 0.18);
    }

    .score-number {
        font-size: 2.4rem;
        font-weight: 700;
        display: block;
        margin-bottom: 0.4rem;
    }

    .score-label {
        font-size: 0.95rem;
        color: #a57300;
        letter-spacing: 0.02em;
        text-transform: uppercase;
    }

    .score-number.correct { color: #4CAF50; }
    .score-number.incorrect { color: #FF7043; }
    .score-number.streak { color: #FBC02D; }

    .question-section {
        background: rgba(255, 255, 255, 0.88);
        border-radius: 24px;
        padding: 32px clamp(24px, 6vw, 60px);
        box-shadow: 0 18px 40px rgba(255, 193, 7, 0.25);
        border: 2px solid rgba(255, 193, 7, 0.35);
        margin-bottom: 2.4rem;
        position: relative;
    }

    .question-text {
        font-size: 1.2rem;
        margin-bottom: 1.8rem;
        padding: 1.5rem;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 18px;
        border: 2px dashed rgba(255, 193, 7, 0.6);
        color: #6d4c00;
        box-shadow: inset 0 0 14px rgba(255, 193, 7, 0.18);
    }

    .spelling-input {
        font-size: 1.6rem;
        padding: 1.2rem;
        border: 4px solid #ffd166;
        border-radius: 18px;
        width: 100%;
        max-width: 430px;
        text-align: center;
        margin-bottom: 1.25rem;
        outline: none;
        transition: all 0.3s ease;
        background: rgba(255, 255, 255, 0.95);
        box-shadow: 0 14px 28px rgba(255, 209, 102, 0.25);
        color: #2b2b3b;
        font-weight: 700;
        letter-spacing: 0.08em;
    }

    .spelling-input:focus {
        border-color: #fcbf49;
        box-shadow: 0 0 28px rgba(252, 191, 73, 0.45);
        transform: scale(1.03);
    }

    /* Submit buttons use bee theme */
    .submit-btn {
        background: linear-gradient(90deg, #FFB300 0%, #FFD54F 100%);
        color: #2b2100;
        border: none;
        border-radius: 28px;
        padding: 13px 30px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.25s ease, box-shadow 0.25s ease;
        position: relative;
        overflow: hidden;
        margin: 0 0.5rem;
    }

    .submit-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 0 14px rgba(255, 235, 59, 0.45);
    }

    .submit-btn:active {
        transform: scale(0.97);
    }

    .submit-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    .submit-btn.skip-style {
        background: linear-gradient(90deg, #81D4FA 0%, #4FC3F7 100%);
    }

    .feedback {
        min-height: 80px;
        padding: 1rem 1.5rem;
        margin: 1rem 0;
        border-radius: 18px;
        display: none;
        font-size: 1.05rem;
    }

    .feedback.correct {
        background: rgba(76, 175, 80, 0.14);
        border: 2px solid rgba(76, 175, 80, 0.65);
        color: #2e7d32;
    }

    .feedback.incorrect {
        background: rgba(255, 160, 122, 0.14);
        border: 2px solid rgba(255, 112, 67, 0.65);
        color: #bf360c;
    }

    .feedback.hidden {
        opacity: 0;
        transform: scale(0.9);
    }

    /* Voice controls use bee theme buttons */
    .pronounce-btn {
        background: linear-gradient(90deg, #8BC34A 0%, #C5E1A5 100%);
        color: #2b2100;
        border: none;
        border-radius: 28px;
        padding: 13px 30px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.25s ease, box-shadow 0.25s ease;
        position: relative;
        overflow: hidden;
    }

    .pronounce-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 0 14px rgba(255, 235, 59, 0.45);
    }

    .pronounce-btn:active {
        transform: scale(0.97);
    }

    .pronounce-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    .voice-controls {
        margin: 1.2rem 0;
        text-align: center;
    }

    .voice-visualizer {
        display: flex;
        flex-direction: column;
        justify-content: center;
        width: 320px;
        height: 86px;
        margin: 1.2rem auto;
        background: linear-gradient(135deg, #4158d0 0%, #c850c0 50%, #ffcc70 100%);
        border-radius: 22px;
        padding: 18px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 12px 28px rgba(65, 88, 208, 0.25);
        opacity: 0.55;
        transition: opacity 0.3s ease, box-shadow 0.3s ease;
    }

    .voice-visualizer.active {
        animation: voiceGlow 2s ease-in-out infinite alternate;
        opacity: 1;
        box-shadow: 0 18px 40px rgba(65, 88, 208, 0.35);
    }

    @keyframes voiceGlow {
        0% { box-shadow: 0 12px 35px rgba(65, 88, 208, 0.35); }
        100% { box-shadow: 0 18px 48px rgba(255, 204, 112, 0.45); }
    }

    .voice-waves {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 50px;
        gap: 3px;
    }

    .voice-wave {
        width: 4px;
        background: linear-gradient(45deg, #40e0ff, #667eea, #ff6b6b);
        border-radius: 2px;
        animation: waveform 1.5s ease-in-out infinite;
        transform-origin: center;
        animation-play-state: paused;
    }

    .voice-wave:nth-child(1) { height: 15px; animation-delay: 0s; }
    .voice-wave:nth-child(2) { height: 25px; animation-delay: 0.1s; }
    .voice-wave:nth-child(3) { height: 35px; animation-delay: 0.2s; }
    .voice-wave:nth-child(4) { height: 45px; animation-delay: 0.3s; }
    .voice-wave:nth-child(5) { height: 50px; animation-delay: 0.4s; }
    .voice-wave:nth-child(6) { height: 45px; animation-delay: 0.5s; }
    .voice-wave:nth-child(7) { height: 35px; animation-delay: 0.6s; }
    .voice-wave:nth-child(8) { height: 25px; animation-delay: 0.7s; }
    .voice-wave:nth-child(9) { height: 15px; animation-delay: 0.8s; }
    .voice-wave:nth-child(10) { height: 30px; animation-delay: 0.9s; }
    .voice-wave:nth-child(11) { height: 40px; animation-delay: 1.0s; }
    .voice-wave:nth-child(12) { height: 35px; animation-delay: 1.1s; }
    .voice-wave:nth-child(13) { height: 20px; animation-delay: 1.2s; }

    @keyframes waveform {
        0%, 100% {
            transform: scaleY(0.3);
            opacity: 0.7;
        }
        50% {
            transform: scaleY(1.2);
            opacity: 1;
        }
    }

    .voice-visualizer.active .voice-wave {
        animation-play-state: running;
    }

    .voice-status {
        position: absolute;
        top: 8px;
        left: 50%;
        transform: translateX(-50%);
        font-size: 0.82rem;
        color: #ffe29f;
        font-weight: 700;
        text-shadow: 0 0 12px rgba(255, 226, 159, 0.6);
    }

    .voice-visualizer:not(.active) .voice-status {
        color: #fef4da;
        text-shadow: 0 0 8px rgba(255, 234, 210, 0.4);
    }

    .microphone-icon {
        position: absolute;
        top: 16px;
        right: 16px;
        font-size: 1.3rem;
        color: #ffe29f;
        animation: micPulse 1s ease-in-out infinite alternate;
    }

    .voice-visualizer:not(.active) .microphone-icon {
        animation-play-state: paused;
        opacity: 0.7;
    }

    @keyframes micPulse {
        0% { opacity: 0.7; transform: scale(1); }
        100% { opacity: 1; transform: scale(1.1); }
    }

    .quiz-complete {
        background: rgba(255, 255, 255, 0.88);
        border-radius: 24px;
        padding: 3rem 2rem;
        border: 2px solid rgba(255, 193, 7, 0.35);
        box-shadow: 0 18px 36px rgba(255, 193, 7, 0.22);
        text-align: center;
    }

    .final-score {
        font-size: 3.1rem;
        font-weight: 800;
        margin: 1.2rem 0;
        color: #6d4c00;
        text-shadow: 0 4px 12px rgba(255, 213, 79, 0.45);
    }

    .encouragement {
        font-size: 1.25rem;
        margin: 1rem 0;
        color: #6d4c00;
        font-weight: 600;
    }

    .celebration {
        animation: celebrate 2s ease-in-out infinite;
    }

    @keyframes celebrate {
        0%, 100% { transform: scale(1) rotate(0deg); }
        50% { transform: scale(1.08) rotate(6deg); }
    }

    .quiz-buttons {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .error-message {
        background: linear-gradient(135deg, #ffe5ec 0%, #ffcfd2 100%);
        color: #851d41;
        padding: 1.1rem 1.3rem;
        border-radius: 18px;
        margin: 1rem 0;
        border: 2px dashed rgba(255, 159, 177, 0.7);
        font-weight: 700;
        box-shadow: 0 16px 32px rgba(255, 182, 193, 0.35);
    }

    .welcome-overlay {
        position: fixed;
        inset: 0;
        background: rgba(255, 228, 246, 0.92);
        backdrop-filter: blur(6px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 200;
        padding: 2rem;
        transition: opacity 0.6s ease;
    }

    .welcome-overlay.hidden {
        opacity: 0;
        pointer-events: none;
    }

    .welcome-card {
        max-width: 720px;
        background: linear-gradient(135deg, #ffd6ff 0%, #caffbf 100%);
        border-radius: 36px;
        padding: 3rem 2.5rem;
        text-align: center;
        box-shadow: 0 28px 60px rgba(255, 182, 193, 0.4);
        border: 4px solid rgba(255,255,255,0.8);
        position: relative;
        overflow: hidden;
    }

    .welcome-card::after {
        content: '';
        position: absolute;
        inset: -40% 10% 40% 10%;
        background: radial-gradient(circle at center, rgba(255,255,255,0.6), transparent 60%);
        opacity: 0.9;
        pointer-events: none;
    }

    .welcome-title {
        font-size: 2.6rem;
        font-weight: 800;
        color: #3a0ca3;
        margin-bottom: 1.2rem;
        position: relative;
        z-index: 1;
    }

    .welcome-text {
        font-size: 1.18rem;
        color: #2c2c54;
        margin-bottom: 1.8rem;
        position: relative;
        z-index: 1;
        font-weight: 600;
    }

    .welcome-points {
        display: grid;
        gap: 1rem;
        margin: 0 auto 2.2rem;
        max-width: 520px;
        text-align: left;
        position: relative;
        z-index: 1;
    }

    .welcome-point {
        background: rgba(255, 255, 255, 0.88);
        border-radius: 18px;
        padding: 1rem 1.4rem;
        box-shadow: 0 12px 24px rgba(0,0,0,0.06);
        font-weight: 600;
        color: #3d405b;
        display: flex;
        gap: 0.75rem;
        align-items: center;
    }

    .welcome-point span {
        font-size: 1.5rem;
    }

    .welcome-start-btn {
        background: linear-gradient(135deg, #ffb86c 0%, #ff006e 100%);
        color: white;
        border: none;
        padding: 1.1rem 2.8rem;
        border-radius: 32px;
        font-size: 1.2rem;
        font-weight: 800;
        cursor: pointer;
        box-shadow: 0 22px 45px rgba(255, 0, 110, 0.35);
        transition: transform 0.3s ease;
        position: relative;
        z-index: 1;
    }

    .welcome-start-btn:hover {
        transform: translateY(-4px) scale(1.03);
    }
</style>
{% endblock %}

{% block content %}
<div id="welcomeOverlay" class="welcome-overlay">
    <div class="welcome-card">
        <h1 class="welcome-title">🐝 Welcome to the BeeSmart Buzz-Off!</h1>
        <p class="welcome-text">
            Get ready for the sweetest spelling adventure in the hive. Warm up your wings, stretch those letters, and prepare to prove you're a Honeycomb Hero!
        </p>
        <div class="welcome-points">
            <div class="welcome-point"><span>🍯</span>Earn warm fuzzies for every word you conquer.</div>
            <div class="welcome-point"><span>🎯</span>Listen carefully, spell boldly, and keep your combo streak buzzing.</div>
            <div class="welcome-point"><span>🛸</span>Need a breather? Skip a word and we'll loop back later.</div>
        </div>
        <button id="startQuizBtn" class="welcome-start-btn" onclick="currentQuiz.startQuiz()">
            🚀 Launch the Spelling Mission!
        </button>
    </div>
</div>

<div class="quiz-container">
    <!-- Quiz Header with Progress and Scores -->
    <div class="quiz-header">
        <div class="progress-info">
            <span id="progressText">Loading...</span>
            <span>� Honeycomb Hero Challenge</span>
        </div>
        
        <div class="score-display">
            <div class="score-item">
                <span id="correctScore" class="score-number">0</span>
                <div class="score-label">✅ Correct</div>
            </div>
            <div class="score-item">
                <span id="incorrectScore" class="score-number">0</span>
                <div class="score-label">❌ Missed</div>
            </div>
            <div class="score-item">
                <span id="streakScore" class="score-number">0</span>
                <div class="score-label">🔥 Streak</div>
            </div>
        </div>
    </div>
    
    <!-- Question Section -->
    <div id="questionSection" class="question-section">
        <div id="questionText" class="question-text">
            Your clue will pop up here once the mission launches!
        </div>
        
        <!-- Voice Controls -->
        <div class="voice-controls" style="margin: 1rem 0;">
            <button id="pronounceBtn" class="pronounce-btn" onclick="pronounceWord()" title="🔊 Hear the word definition">
                🔊 Pronounce Word
            </button>
            <button id="repeatBtn" class="pronounce-btn" onclick="repeatPronunciation()" title="🔁 Repeat pronunciation" style="margin-left: 0.5rem;">
                🔁 Repeat
            </button>
        </div>
        
        <!-- Voice Visualizer -->
        <div id="voiceVisualizer" class="voice-visualizer">
            <div class="voice-status">� Ready</div>
            <div class="microphone-icon">🎤</div>
            <div class="voice-waves">
                <div class="voice-wave"></div>
                <div class="voice-wave"></div>
                <div class="voice-wave"></div>
                <div class="voice-wave"></div>
                <div class="voice-wave"></div>
                <div class="voice-wave"></div>
                <div class="voice-wave"></div>
                <div class="voice-wave"></div>
                <div class="voice-wave"></div>
                <div class="voice-wave"></div>
                <div class="voice-wave"></div>
                <div class="voice-wave"></div>
                <div class="voice-wave"></div>
            </div>
        </div>
        
        <div class="bee-input" id="beeInputWrapper">
            <input type="text" 
                   id="spellingInput"
                   placeholder="Type your answer here..."
                   autocomplete="off"
                   autocorrect="off"
                   spellcheck="false">
        </div>
        
        <div class="phonetic-reveal hidden" id="phoneticHint" aria-live="polite"></div>
        
        <div class="quiz-buttons">
            <button id="submitBtn" class="submit-btn" onclick="submitAnswer()" disabled>
                ✨ Submit Answer
            </button>
            <button id="skipBtn" class="submit-btn skip-style" onclick="skipWord()" disabled>
                ⏭️ Skip
            </button>
        </div>
        
        <div id="feedback" class="feedback hidden"></div>
    </div>
    
    <!-- Quiz Complete Section (initially hidden) -->
    <div id="quizComplete" class="quiz-complete" style="display: none;">
        <div class="celebration">🎉</div>
        <h2>🎉 Quiz Complete!</h2>
        <p>Amazing Work! You're becoming a spelling champion!</p>
        <div class="final-score">
            <span id="finalCorrect">0</span> / <span id="finalTotal">0</span>
        </div>
        <div class="encouragement">
            You're becoming a spelling champion! 🏆
        </div>
        <div class="quiz-buttons">
            <button class="submit-btn" onclick="restartQuiz()">
                🔄 Try Again
            </button>
            <button class="submit-btn" onclick="goHome()">
                🏠 Back to Menu
            </button>
        </div>
    </div>
</div>

<div class="honey-jar" aria-hidden="true">
    <div class="honey-fill" id="honeyFill"></div>
</div>

<div class="bee-mascot" id="beeMascot" aria-hidden="true">
    <img src="/static/BeeSmartLogoTransparent.png" alt="Bee mascot smiling">
</div>

<script>
class VoiceAnnouncer {
    constructor() {
        this.synthesis = window.speechSynthesis;
        this.selectedVoice = null;
        this.currentWord = '';
        this.currentSpelling = '';
        this._prepareVoices();
    }

    _prepareVoices() {
        if (!this.synthesis) {
            return;
        }

        const setVoice = () => {
            const voices = this.synthesis.getVoices();
            if (!voices.length) {
                return;
            }

            const preferred = [
                'Microsoft Zira - English (United States)',
                'Google US English Female',
                'Samantha',
                'Victoria',
                'Kate',
                'Fiona'
            ];

            for (const name of preferred) {
                const match = voices.find(v => v.name.includes(name.split(' - ')[0]));
                if (match) {
                    this.selectedVoice = match;
                    break;
                }
            }

            if (!this.selectedVoice) {
                this.selectedVoice = voices.find(v => (v.gender || '').toLowerCase() === 'female') || voices[0];
            }
        };

        if (!this.synthesis.getVoices().length) {
            this.synthesis.addEventListener('voiceschanged', () => setVoice(), { once: true });
        } else {
            setVoice();
        }
    }

    _setVisualizer(active) {
        const visualizer = document.getElementById('voiceVisualizer');
        if (!visualizer) {
            return;
        }
        visualizer.classList.toggle('active', active);
        const status = visualizer.querySelector('.voice-status');
        if (status) {
            status.textContent = active ? '🗣️ Speaking...' : '🔈 Ready';
        }
    }

    speak(text, { rate = 0.85, pitch = 1.05, volume = 0.95, onEnd = null } = {}) {
        if (!this.synthesis || !text) {
            if (typeof onEnd === 'function') {
                onEnd();
            }
            return;
        }

        this.synthesis.cancel();
        const utterance = new SpeechSynthesisUtterance(text);
        if (this.selectedVoice) {
            utterance.voice = this.selectedVoice;
        }
        utterance.rate = rate;
        utterance.pitch = pitch;
        utterance.volume = volume;

        utterance.onstart = () => this._setVisualizer(true);
        utterance.onend = () => {
            this._setVisualizer(false);
            if (typeof onEnd === 'function') {
                onEnd();
            }
        };
        utterance.onerror = () => {
            this._setVisualizer(false);
            if (typeof onEnd === 'function') {
                onEnd();
            }
        };

        this.synthesis.speak(utterance);
    }

    stop() {
        if (this.synthesis) {
            this.synthesis.cancel();
        }
        this._setVisualizer(false);
    }

    rememberWord(word, spelledOut = '') {
        this.currentWord = word || '';
        if (spelledOut) {
            this.currentSpelling = spelledOut;
        } else if (word) {
            this.currentSpelling = word.split('').join(' ');
        } else {
            this.currentSpelling = '';
        }
    }

    announceWord(word, spelledOut = '') {
        if (!word) {
            return;
        }
        this.rememberWord(word, spelledOut);
        this.speak(word, { rate: 0.8, pitch: 1.0 });
    }

    repeatWord() {
        if (this.currentWord) {
            this.speak(this.currentWord, { rate: 0.8, pitch: 1.0 });
        }
    }

    celebrate(word, onComplete) {
        const cheers = [
            `Amazing job! ${word} is correct!`,
            `Buzzing brilliance! ${word} is perfect!`,
            `Sweet success! You spelled ${word} just right!`
        ];
        const message = cheers[Math.floor(Math.random() * cheers.length)];
        this.speak(message, { rate: 0.9, pitch: 1.15, onEnd: onComplete });
    }

    spellOut(word, fallback) {
        if (fallback) {
            return fallback;
        }
        if (!word) {
            return '';
        }
        return word.split('').join(' ');
    }

    announceMiss(word, spelledOut, { skipped = false } = {}, onComplete) {
        const letters = this.spellOut(word, spelledOut);
        const replacements = { word, spelling: letters };
        const pool = skipped ? skipMessages : encouragementMessages;
        const fallback = skipped
            ? `No worries, we will buzz past this one. The word was ${word}. That is ${letters}.`
            : `Almost! The correct spelling is ${word}. That is ${letters}.`;
        const message = chooseRandomMessage(pool, fallback, replacements);
        this.rememberWord(word, letters);
        this.speak(message, { rate: 0.85, pitch: 1.0, onEnd: onComplete });
    }

    welcome(onEnd) {
        const intros = [
            'Hey superstar speller! Welcome to the BeeSmart Buzz-Off. Get comfy, warm up those wings, and press start when you are ready to shine.',
            'Welcome to the BeeSmart hive, spelling champion! Take a breath, press start when your wings are ready, and we will launch a galaxy of words.'
        ];
        const message = intros[Math.floor(Math.random() * intros.length)];
        this.speak(message, { rate: 0.88, pitch: 1.12, onEnd });
    }

    launchSequence(onEnd) {
        const hypeLines = [
            'Awesome choice! Firing up the honey blasters. Listen close and sprinkle your best spelling magic!',
            'Here we go! The hive is cheering for you. Tune in, spell bold, and let that first word sparkle!'
        ];
        const message = hypeLines[Math.floor(Math.random() * hypeLines.length)];
        this.speak(message, { rate: 0.9, pitch: 1.1, onEnd });
    }

    finish(correct, total) {
        if (!total) {
            return;
        }
        const percentage = Math.round((correct / total) * 100);
        let message = `Great effort! You finished ${total} words.`;
        if (percentage >= 90) {
            message = `Spectacular! You spelled ${correct} out of ${total} correctly!`;
        } else if (percentage >= 75) {
            message = `Wonderful work! ${correct} correct out of ${total}. Keep buzzing!`;
        }
        this.speak(message, { rate: 0.9, pitch: 1.1 });
    }
}

const voiceAnnouncer = new VoiceAnnouncer();

const positiveMessages = [
    '🎉 Brilliant! "{word}" was spot on!',
    '🍯 Sweet spelling! "{word}" is right!',
    '🧠 Bee genius! "{word}" nailed it!',
    '🌟 Buzz-tastic! "{word}" is correct!'
];

const encouragementMessages = [
    'Almost! The word "{word}" is spelled {spelling}.',
    'No stingers! "{word}" goes like this: {spelling}.',
    'Keep buzzing! We spell "{word}" as {spelling}.',
    'Close wings! The hive spells "{word}" {spelling}.'
];

const skipMessages = [
    'Bee break! The skipped word was "{word}" — that is {spelling}.',
    'We can glide past this one. "{word}" buzzes as {spelling}.',
    'No worries, hive buddy. "{word}" is spelled {spelling}.'
];

function formatMessage(template, replacements) {
    return template.replace(/\{(\w+)\}/g, (_, key) => replacements[key] ?? '');
}

function chooseRandomMessage(options, fallback, replacements) {
    if (!options || !options.length) {
        return fallback;
    }
    const template = options[Math.floor(Math.random() * options.length)];
    return formatMessage(template, replacements);
}

async function readJsonOrFriendlyError(response) {
    const text = await response.text();
    if (!text) {
        return {};
    }
    try {
        return JSON.parse(text);
    } catch (error) {
        console.error('Unexpected non-JSON response:', text);
        const friendly = new Error('We ran into a hiccup talking to the BeeSmart hive. Please try again.');
        friendly.status = response.status;
        throw friendly;
    }
}

function renderClue(clue) {
    const prompt = clue?.definition || clue?.sentence || clue?.hint || 'Listen carefully for your next spelling challenge!';
    document.getElementById('questionText').textContent = prompt;
}

const currentQuiz = {
    startTime: null,
    lastClue: null,
    hasStarted: false,
    welcomeHasPlayed: false,

    async init() {
        try {
            this._setupEventListeners();
            this.disableInput();
            const section = document.getElementById('questionSection');
            if (section) {
                section.style.opacity = '0.35';
            }
            const progress = document.getElementById('progressText');
            if (progress) {
                progress.textContent = 'Press start to kick off your BeeSmart mission!';
            }
            this.showWelcome();
        } catch (error) {
            console.error('Quiz initialization failed:', error);
            this.showError('Failed to start quiz. Please refresh and try again.');
        }
    },

    showWelcome() {
        const overlay = document.getElementById('welcomeOverlay');
        if (overlay) {
            overlay.style.display = 'flex';
            overlay.classList.remove('hidden');
        }
        if (!this.welcomeHasPlayed) {
            this.welcomeHasPlayed = true;
            setTimeout(() => voiceAnnouncer.welcome(), 600);
        }
    },

    startQuiz() {
        if (this.hasStarted) {
            return;
        }
        this.hasStarted = true;
        voiceAnnouncer.stop();

        const overlay = document.getElementById('welcomeOverlay');
        if (overlay) {
            overlay.classList.add('hidden');
            setTimeout(() => {
                overlay.style.display = 'none';
            }, 650);
        }

        const section = document.getElementById('questionSection');
        if (section) {
            section.style.opacity = '1';
        }

        const progress = document.getElementById('progressText');
        if (progress) {
            progress.textContent = 'Launching first challenge...';
        }

        this.startTime = null;
        this.hideFeedback();
        this.disableInput();
        voiceAnnouncer.launchSequence(() => this.loadCurrentQuestion());
    },

    async pronounceCurrentWord(refresh = false) {
        if (!this.hasStarted) {
            return;
        }
        try {
            if (!refresh && this.lastClue?.word) {
                voiceAnnouncer.announceWord(this.lastClue.word, this.lastClue.phonetic_spelling || this.lastClue.phonetic);
                return;
            }

            const clue = await this.fetchClue();
            if (clue.word) {
                voiceAnnouncer.announceWord(clue.word, clue.phonetic_spelling || clue.phonetic);
            }
        } catch (error) {
            console.error('Unable to pronounce word:', error);
            this.showError('Could not pronounce the word right now. Please try again.');
        }
    },

    async loadCurrentQuestion() {
        try {
            if (!this.hasStarted) {
                return;
            }
            voiceAnnouncer.stop();
            this.hideFeedback();
            this.disableInput();

            const response = await fetch('/api/next', { method: 'POST' });
            const data = await readJsonOrFriendlyError(response);

            if (!response.ok) {
                if (data.action_required === 'upload_words') {
                    throw new Error(data.message || 'Please upload a word list before starting the quiz.');
                }
                throw new Error(data.error || 'Failed to load the next word.');
            }

            if (data.done) {
                this.showQuizComplete(data.summary || {});
                return;
            }

            this.updateScores(data.progress);
            document.getElementById('progressText').textContent = `Question ${data.index} of ${data.total}`;

            const input = document.getElementById('spellingInput');
            input.value = '';

            const clue = await this.fetchClue();
            renderClue(clue);

            if (clue.word) {
                setTimeout(() => voiceAnnouncer.announceWord(clue.word, clue.phonetic_spelling || clue.phonetic), 600);
            }

            this.startTime = Date.now();
            this.enableInput();
            input.focus();
        } catch (error) {
            console.error('Error loading question:', error);
            const message = error && error.message ? error.message : 'Unexpected issue loading the question.';
            this.showError(message);
            this.enableInput();
        }
    },

    async fetchClue() {
        const response = await fetch('/api/pronounce', { method: 'POST' });
        const data = await readJsonOrFriendlyError(response);
        if (!response.ok) {
            throw new Error(data.error || 'Unable to retrieve pronunciation helper.');
        }
        this.lastClue = data;
        return data;
    },

    async submitAnswer() {
        if (!this.hasStarted) {
            return;
        }
        const input = document.getElementById('spellingInput');
        const userInput = (input.value || '').trim();
        if (!userInput) {
            this.showFeedback(false, 'Please type your answer first!');
            return;
        }

        voiceAnnouncer.stop();
        this.disableInput();

        try {
            const elapsed = this.startTime ? (Date.now() - this.startTime) : 0;
            const response = await fetch('/api/answer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    user_input: userInput,
                    method: 'keyboard',
                    elapsed_ms: elapsed
                })
            });

            const result = await readJsonOrFriendlyError(response);

            if (!response.ok) {
                throw new Error(result.error || 'Failed to submit answer.');
            }

            const message = result.feedback_message || (result.correct
                ? chooseRandomMessage(
                    positiveMessages,
                    `🎉 Excellent! "${result.expected}" is correct!`,
                    { word: result.expected }
                )
                : chooseRandomMessage(
                    encouragementMessages,
                    `Good try! The correct spelling is "${result.expected}"`,
                    {
                        word: result.expected,
                        spelling: result.phonetic_spelling || voiceAnnouncer.spellOut(result.expected)
                    }
                ));
            this.showFeedback(result.correct, message);
            this.updateScores(result.progress);

            if (result.correct) {
                voiceAnnouncer.celebrate(result.expected, () => this.loadCurrentQuestion());
            } else {
                voiceAnnouncer.announceMiss(
                    result.expected,
                    result.phonetic_spelling,
                    { skipped: !!result.skipped },
                    () => this.loadCurrentQuestion()
                );
            }
        } catch (error) {
            console.error('Error submitting answer:', error);
            this.showError(error.message || 'Something went wrong submitting your answer.');
            this.enableInput();
        }
    },

    async skipCurrentWord() {
        if (!this.hasStarted) {
            return;
        }
        voiceAnnouncer.stop();
        this.disableInput();

        try {
            const elapsed = this.startTime ? (Date.now() - this.startTime) : 0;
            const response = await fetch('/api/answer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    user_input: '[skipped]',
                    method: 'skip',
                    skip: true,
                    elapsed_ms: elapsed
                })
            });

            const result = await readJsonOrFriendlyError(response);

            if (!response.ok) {
                throw new Error(result.error || 'Could not skip this word.');
            }

            this.showFeedback(false, result.feedback_message || 'Buzzing to the next word!');
            this.updateScores(result.progress);
            voiceAnnouncer.announceMiss(
                result.expected,
                result.phonetic_spelling,
                { skipped: true },
                () => this.loadCurrentQuestion()
            );
        } catch (error) {
            console.error('Error skipping word:', error);
            this.showError(error.message || 'We could not skip that word.');
            this.enableInput();
        }
    },

    updateScores(progress = {}) {
        if (!progress) {
            return;
        }
        if (typeof progress.correct === 'number') {
            document.getElementById('correctScore').textContent = progress.correct;
        }
        if (typeof progress.incorrect === 'number') {
            document.getElementById('incorrectScore').textContent = progress.incorrect;
        }
        if (typeof progress.streak === 'number') {
            document.getElementById('streakScore').textContent = progress.streak;
        }
    },

    showFeedback(isCorrect, message) {
        const feedback = document.getElementById('feedback');
        feedback.textContent = message;
        feedback.className = `feedback ${isCorrect ? 'correct' : 'incorrect'}`;
    },

    hideFeedback() {
        const feedback = document.getElementById('feedback');
        feedback.className = 'feedback hidden';
    },

    showError(message) {
        const feedback = document.getElementById('feedback');
        feedback.innerHTML = `<div class="error-message">🐝 Oops! ${message}</div>`;
        feedback.className = 'feedback';
    },

    disableInput() {
        const input = document.getElementById('spellingInput');
        if (input) {
            input.disabled = true;
        }
        const submit = document.getElementById('submitBtn');
        if (submit) {
            submit.disabled = true;
        }
        const skip = document.getElementById('skipBtn');
        if (skip) {
            skip.disabled = true;
        }
        const pronounce = document.getElementById('pronounceBtn');
        if (pronounce) {
            pronounce.disabled = true;
        }
        const repeat = document.getElementById('repeatBtn');
        if (repeat) {
            repeat.disabled = true;
        }
    },

    enableInput() {
        const input = document.getElementById('spellingInput');
        if (input) {
            input.disabled = false;
        }
        const submit = document.getElementById('submitBtn');
        if (submit) {
            submit.disabled = false;
        }
        const skip = document.getElementById('skipBtn');
        if (skip) {
            skip.disabled = false;
        }
        const pronounce = document.getElementById('pronounceBtn');
        if (pronounce) {
            pronounce.disabled = false;
        }
        const repeat = document.getElementById('repeatBtn');
        if (repeat) {
            repeat.disabled = false;
        }
    },

    showQuizComplete(summary) {
        document.getElementById('questionSection').style.display = 'none';
        const completeSection = document.getElementById('quizComplete');
        completeSection.style.display = 'block';
        this.hasStarted = false;
        this.disableInput();

        const correct = summary.correct || 0;
        const total = summary.total || 0;
        document.getElementById('finalCorrect').textContent = correct;
        document.getElementById('finalTotal').textContent = total;

        voiceAnnouncer.finish(correct, total);
    },

    _setupEventListeners() {
        document.getElementById('spellingInput').addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                this.submitAnswer();
            }
        });
    }
};

async function pronounceWord() {
    if (!currentQuiz.hasStarted) {
        return;
    }
    await currentQuiz.pronounceCurrentWord(true);
}

function repeatPronunciation() {
    if (!currentQuiz.hasStarted) {
        return;
    }
    voiceAnnouncer.repeatWord();
}

function submitAnswer() {
    currentQuiz.submitAnswer();
}

function skipWord() {
    if (!currentQuiz.hasStarted) {
        return;
    }
    currentQuiz.skipCurrentWord();
}

async function restartQuiz() {
    try {
        const response = await fetch('/api/reset', { method: 'POST' });
        if (response.ok) {
            window.location.reload();
        } else {
            currentQuiz.showError('Could not restart the quiz. Please try again.');
        }
    } catch (error) {
        currentQuiz.showError('Something went wrong while restarting.');
    }
}

function goHome() {
    window.location.href = '/';
}

document.addEventListener('DOMContentLoaded', () => currentQuiz.init());
</script>
{% endblock %}